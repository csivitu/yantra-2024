// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(uuid())
  name            String
  email           String    @unique
  password        String?
  emailVerified   DateTime? @map("email_verified")
  image           String?
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  accounts        Account[]
  sessions        Session[]
  githubProfile   String    @default("") @map("github_profile")
  linkedinProfile String    @default("") @map("linkedin_profile")
  projects        String    @default("") @map("projects")
  bio             String    @default("") @map("bio")
  teamId          String?
  team            Team?     @relation("UserToTeam", fields: [teamId], references: [id])
  createdTeams    Team[]    @relation("TeamCreatedByUser")

  @@map("users")
}

model Account {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  type              String?
  provider          String
  providerAccountId String   @map("provider_account_id")
  token_type        String?
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  scope             String?
  id_token          String?  @db.Text
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  userId       String?  @map("user_id")
  sessionToken String   @unique @map("session_token") @db.Text
  accessToken  String?  @map("access_token") @db.Text
  expires      DateTime
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("sessions")
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Team {
  id          String   @id @default(cuid())
  teamName    String   @unique @map("team_name")
  teamCode    String   @unique @map("team_code")
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  githubLink  String?  @map("github_link")
  figmaLink   String?  @map("figma_link")
  // dLink       String? //deployed li
  users       User[]   @relation("UserToTeam")
  createdBy   User?    @relation("TeamCreatedByUser", fields: [createdById], references: [id])
  createdById String?
  status      String   @default("Team pending review")

  @@map("teams")
}

model Events {
  id                String  @id @default(cuid())
  eventName         String  @unique @map("event_name")
  eventType         String  @map("event_type")
  description       String  @map("description")
  clubName          String  @map("club_name")
  collaboratingWith String? @map("collaborating_with")
  venue             String  @map("venue")
  eventStart        String  @map("event_start")
  eventEnd          String  @map("event_end")
  isOvernight       String  @map("is_overnight")
  logo              String  @map("logo")

  @@map("events")
}
